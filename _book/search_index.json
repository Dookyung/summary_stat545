[
["index.html", "Stat545 정리 Welcome", " Stat545 정리 Dookyung Kim Welcome 이책은 __“Stat545.com”__의 강의내용을 정리한 책입니다. http://stat545.com/index.html "],
["cm001-introduction.html", "1 cm001 - introduction 1.1 Intro to course; S/W install; acct sign-ups 1.2 Deep Thoughts about data analytic work; intro to R and RStudio", " 1 cm001 - introduction 1.1 Intro to course; S/W install; acct sign-ups 1.1.1 Data Domination “Software programming, algorithm development and other technological skills can give scientists an edge in their fields.” — Careers,31 August 2017 “A picture is worth a thousand words.” 1.1.2 Data Science Tool : R Rstudio : an integrated development enviroment(IDE) for R Rmarkdown git and github : Version control systems(VCS) and collaboration tools. * For a quick, stand-alone document that doesn&#39;t fit neatly into a repository or project (yet), make it a [Gist](https://gist.github.com) GNU Make How to make end products more integrated and more reproducible? How to keep everything up-to-date? if the data changes, how do we remember to remake the figure 2B and 4? 1.1.3 What is Data Science? https://gist.github.com/hadley/820f09ded347c62c2864 1.2 Deep Thoughts about data analytic work; intro to R and RStudio 1.2.1 To do before next class: swirl: “a software package for the R programming language that turns the R console into an interactive learning environment” 1.2.2 Basics of working with R at the command line and RStudio goodies Launch RStudio/R and notice the default panes: Console (entire left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help (tabbed in lower right) Customizing RStudio. Make an assignment. x &lt;- 3 * 4 x #&gt; [1] 12 “assignments” form: objectName &lt;- value Keyboard shortcut for assignment operator &lt;- is Alt + - (the minus sign). RStudio offers many handy keyboard shortcuts. Alt+Shift+K brings up a keyboard shortcut reference card. Object names i_use_snake_case other.people.use.periods evenOthersUseCamelCase Make another assignment this_is_a_really_long_name &lt;- 2.5 To inspect this, try out RStudio’s completion facility: type the first few characters, press TAB, add characters until you disambiguate, then press return. Make another assignment jenny_rocks &lt;- 2 ^ 3 R has a mind-blowing collection of built-in functions that are accessed like so functionName(arg1 = val1, arg2 = val2, and so on) seq() which makes regular sequences of numbers Type se and hit TAB. seq(1,10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 yo &lt;- &quot;hello world&quot; y &lt;- seq(1, 10) y #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Surrounding the assignment with parentheses, which causes assignment and “print to screen” to happen. (y &lt;- seq(1, 10)) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Not all functions have (or require) arguments: date() #&gt; [1] &quot;Fri Jul 6 21:08:07 2018&quot; The workspace is where user-defined objects accumulate. You can also get a listing of these objects with commands: objects() #&gt; [1] &quot;jenny_rocks&quot; &quot;this_is_a_really_long_name&quot; #&gt; [3] &quot;x&quot; &quot;y&quot; #&gt; [5] &quot;yo&quot; ls() #&gt; [1] &quot;jenny_rocks&quot; &quot;this_is_a_really_long_name&quot; #&gt; [3] &quot;x&quot; &quot;y&quot; #&gt; [5] &quot;yo&quot; remove the object named y rm(y) To remove everything: rm(list = ls()) or click the broom in RStudio’s Environment pane. 1.2.3 Workspace and working directory 1.2.3.1 Workspace, .RData 1.2.3.2 Working directory You can explicitly check your working directory with: getwd() Although I do not recommend it, in case you’re curious, you can set R’s working directory at the command line like so: setwd(&quot;~/myCoolProject&quot;) Although I do not recommend it, you can also use RStudio’s Files pane to navigate to a directory and then set it as working directory from the menu: Session –&gt; Set Working Directory –&gt; To Files Pane Location. (You’ll see even more options there). Or within the Files pane, choose More and Set As Working Directory. 1.2.4 RStudio projects Keeping all the files associated with a project organized together – input data, R scripts, analytical results, figures – is such a wise and common practice that RStudio has built-in support for this via its projects. Using Projects Let’s enter a few commands in the Console, as if we are just beginning a project: a &lt;- 2 b &lt;- -3 sig_sq &lt;- 0.5 x &lt;- runif(40) y &lt;- a + b * x + rnorm(40, sd = sqrt(sig_sq)) (avg_x &lt;- mean(x)) #&gt; [1] 0.45 write(avg_x, &quot;avg_x.txt&quot;) plot(x, y) abline(a, b, col = &quot;purple&quot;) dev.print(pdf, &quot;toy_line_plot.pdf&quot;) #&gt; quartz_off_screen #&gt; 2 source(file.r) In your favorite OS-specific way, search your files for toy_line_plot.pdf and presumably you will find the PDF itself (no surprise) but also the script that created it (toy-line.r). This latter phenomenon is a huge win. One day you will want to remake a figure or just simply understand where it came from. If you rigorously save figures to file with R code and not ever ever ever the mouse or the clipboard, you will sing my praises one day. Trust me. 1.2.5 stuff It is traditional to save R scripts with a .R or .r suffix. Comments symbol : # de(comment) : Ctrl+Shift+C This workflow will serve you well in the future: Create an RStudio project for an analytical project Keep inputs there Keep scripts there; edit them, run them in bits or as a whole from there Keep outputs there (like the PDF written above) Many long-time users never save the workspace, never save .RData files (I’m one of them), never save or consult the history. Option to disable the loading of .RData and permanently suppress the prompt on exit to save the workspace (go to Tools-&gt;Options-&gt;General). "],
["r-markdown-test-drive.html", "2 R Markdown test drive", " 2 R Markdown test drive 2.0.0.1 Overview Here is the official R Markdown documentation: http://rmarkdown.rstudio.com 2.0.0.2 Step 0: Software installation and configuration 2.0.0.3 Step 1: Get ready to work 2.0.0.4 Step 2: Practice with RStudio’s boilerplate R Markdown document Do this: File &gt; New File &gt; R Markdown … Give it an informative title. Accept the default Author or edit if you wish. Accept the default output format of HTML. Click OK. Click on “Knit HTML” or do File &gt; Knit Document. RStudio should display a preview of the resulting HTML. 2.0.0.5 Step 3: Take control of the output format The magical process that turns your R Markdown to HTML is like so: foo.Rmd --&gt; foo.md --&gt; foo.html. Output format html: --- title: &quot;Something fascinating&quot; author: &quot;Jenny Bryan&quot; date: &quot;2018-07-07&quot; output: html_document: keep_md: true --- GitHub-flavored markdown: --- title: &quot;Something fascinating&quot; author: &quot;Jenny Bryan&quot; date: &quot;2018-07-07&quot; output: github_document --- 2.0.0.6 Step 4: Swap out the “guts” of the document Insert an empty R chunk: ` ``{r} ## insert your brilliant WORKING code here ``` 2.0.0.7 Step 5: Develop your report 2.0.0.8 Step 6: Publish your report Creating, commiting, and pushing markdown is a very functional, lighweight publishing strategy. This is (sort of) another example of keeping things machine- and human-readable, which is bliss. By making foo.Rmd available, others can see and run your actual code. By sharing foo.md and/or foo.html, others can casually browse your end product and decide if they even want to bother. 2.0.0.9 Troubleshooting Make sure RStudio and the rmarkdown package (and its dependencies) are up-to-date. Get rid of your .Rprofile at least temporarily. Insert a chunk in your .Rmd document so that it renders even when there are errors. ` ``{r setup, include = FALSE, cache = FALSE} knitr::opts_chunk$set(error = TRUE) ``` Tolerate errors in one specific chunk. ` ``{r wing-and-a-prayer, error = TRUE} ## your sketchy code goes here ;) ``` Check your working directory. getwd() list.files() Don’t try to change working directory within an R Markdown document. Don’t be in a hurry to create a complicated sub-directory structure. 2.0.1 HTML on GitHub I have more general ideas about how to make a GitHub repo function as a website. 2.0.1.1 Be savvy about your files Keep files in the plainest, web-friendliest form that is compatible with your main goals. Plain text is the very best. GitHub offers special handling for certain types of files: Markdown files, which may be destined for conversion into, e.g., HTML Markdown files named README.md HTML files, often the result of compiling Markdown files Source code, such as .R files Delimited files, containing data one might bring into R via read.table() PNG files 2.0.1.2 Get over your hang ups re: committing derived products Let’s acknowledge the discomfort some people feel about putting derived products under version control. The taboo of keeping derived products under version control originates from compilation of binary executables from source. Software built on a Mac would not work on Windows and so it made sense to keep these binaries out of the holy source code repository. 2.0.1.3 Markdown Keep intermediate Markdown. Commit both foo.Rmd and foo.md, even if you choose to .gitignore the final foo.html. As of September 2014, GitHub renders R Markdown files nicely, like Markdown, and with proper syntax highlighting, which is great. But, of course, the code blocks just sit there un-executed, so my advice about keeping intermediate Markdown still holds. You want YAML frontmatter that looks something like this for .Rmd: --- title: &quot;Something fascinating&quot; author: &quot;Jenny Bryan&quot; date: &quot;`r format(Sys.Date())`&quot; output: html_document: keep_md: TRUE --- or like this for .R: #&#39; --- #&#39; title: &quot;Something fascinating&quot; #&#39; author: &quot;Jenny Bryan&quot; #&#39; date: &quot;`r format(Sys.Date())`&quot; #&#39; output: #&#39; html_document: #&#39; keep_md: TRUE #&#39; --- 2.0.1.4 README.md README.md at the top-level of your repo as the de facto landing page. This is analogous to index.html. Some repositories consist solely of README.md. Jeff Leek’s write-ups on How to share data with a statistician Developing R packages. README-only repos vs gists : PNGs README gallery 2.0.1.5 Finding stuff OK these are pure GitHub tips but if you’ve made it this far, you’re obviously a keener. Press t to activate the file finder whenever you’re in a repo’s file and directory view. AWESOME, especially when there are files tucked into lots of subdirectories. Press y to get a permanent link when you’re viewing a specific file. Watch what changes in the URL. This is important if you are about to link to a file or to specific lines. Otherwise your links will break easily in the future. If the file is deleted or renamed or if lines get inserted or deleted, your links will no longer point to what you intended. Use y to get links that include a specific commit in the URL. 2.0.1.6 HTML If you have an HTML file in a GitHub repository, simply visiting the file shows the raw HTML. Here’s a nice ugly example: https://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/bit003_api-key-env-var.html No one wants to look at that. You can provide this URL to rawgit.com to serve this HTML more properly and get a decent preview. You can form two different types of URLs with rawgit.com: For sharing low-traffic, temporary examples or demos with small numbers of people, do this: https://rawgit.com/STAT545-UBC/STAT545-UBC.github.io/master/bit003_api-key-env-var.html Basically: replace https://github.com/ with https://rawgit.com/ For use on production websites with any amount of traffic, do this: https://cdn.rawgit.com/STAT545-UBC/STAT545-UBC.github.io/master/bit003_api-key-env-var.html Basically: replace https://github.com/ with https://cdn.rawgit.com/ This sort of enhanced link might be one of the useful things to put in a README.md or other Markdown file in the repo. You may also want to check out this Chrome extension or GitHub &amp; BitBucket HTML Preview, though recently I’ve more success with rawgit.com. Sometimes including HTML files will cause GitHub to think that your R repository is HTML. Besides being slightly annoying, this can make it difficult for people to find your work if they are searching specifically for R repos. You can exclude these files or directories from GitHub’s language statistics by adding a .gitattributes file that marks them as ‘documentation’ rather than code. See an example here. 2.0.1.7 Source code You will notice that GitHub does automatic syntax highlighting for source code. For example, notice the coloring of this R script. The file’s extension is the primary determinant for if/how syntax highlighting will be applied. You can see information on recognized languages, the default extensions and more at github/linguist. You should be doing it anyway, but let this be another reason to follow convention in your use of file extensions. Note you can click on “Raw” in this context as well, to get just the plain text and nothing but the plain text. 2.0.1.8 Delimited files GitHub will nicely render tabular data in the form of .csv (comma-separated) and .tsv (tab-separated) files. You can read more in the blog post announcing this feature in August 2013 or in this GitHub help page. Advice: take advantage of this! If something in your repo can be naturally stored as delimited data, by all means, do so. Make the comma or tab your default delimiter and use the file suffixes GitHub is expecting. I have noticed that GitHub is more easily confused than R about things like quoting, so always inspect the GitHub-rendered .csv or .tsv file in the browser. You may need to do light cleaning to get the automagic rendering to work properly. Think of it as yet another way to learn about imperfections in your data. Here’s an example of a tab delimited file on GitHub: lotr_clean.tsv, originally found here (nope, IBM shut down manyeyes July 2015). Note you can click on “Raw” in this context as well, to get just the plain text and nothing but the plain text. 2.0.1.9 PNGs PNG is the “no brainer” format in which to store figures for the web. But many of us like a vector-based format, such as PDF, for general purpose figures. Bottom line: PNGs will drive you less crazy than PDFs on GitHub. To reduce the aggravation around viewing figures in the browser, make sure to have a PNG version in the repo. Examples: This PNG figure just shows up in the browser A different figure stored as PDF produces the dreaded, annoying “View Raw” speed bump. You’ll have to click through and, on my OS + browser, wait for the PDF to appear in an external PDF viewer. 2015-06-19 update: since I first wrote this GitHub has elevated its treament of PDFs so YAY. It’s slow but it works. Hopefully we are moving towards a world where you can have “web friendly” and “vector” at the same time, without undue headaches. As of October 2014, GitHub provides enhanced viewing and diffing of SVGs. So don’t read this advice as discouraging SVGs. Make them! But consider keeping a PNG around as emergency back up for now. 2.0.1.10 Linking to a ZIP archive of your repo The browsability of GitHub makes your work accessible to people who care about your content but who don’t (yet) use Git themselves. What if such a person wants all the files? Yes, there is a clickable “Download ZIP” button offered by GitHub. But what if you want a link to include in an email or other document? If you add /archive/master.zip to the end of the URL for your repo, you construct a link that will download a ZIP archive of your repository. Click here to try this out on a very small repo: https://github.com/jennybc/lotr/archive/master.zip Go look in your downloads folder! 2.0.1.11 Links and embedded figures To link to another page in your repo, just use a relative link: [admin](courseAdmin/) will link to the courseAdmin/ directory inside the current directory. [admin](/courseAdmin/) will link to the top-level courseAdmin/ directory from any where in the repo The same idea also works for images. ![](image.png) will include image.png located in the current directory 2.0.1.12 Let people correct you on the internet They love that! You can create a link that takes people directly to an editing interface in the browser. Behind the scenes, assuming the clicker is signed into GitHub but is not you, this will create a fork in their account and send you a pull request. When I click the link below, I am able to actually commit directly to master for this repo. CLICK HERE to suggest an edit to this page! Here’s what that link looks like in the Markdown source: [CLICK HERE to suggest an edit to this page!](https://github.com/STAT545-UBC/STAT545-UBC.github.io/edit/master/bit006_github-browsability-wins.md) and here it is with placeholders: [INVITATION TO EDIT](&lt;URL to your repo&gt;/edit/master/&lt;path to your md file&gt;) AFAIK, to do that in a slick automatic way across an entire repo/site, you need to be using Jekyll or some other automated system. But you could easily handcode such links on a small scale. "]
]
